{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useRef, useEffect, useImperativeHandle, useState, useMemo } from 'react';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/meta';\nimport './codemirror.css';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultOptions = {\n  tabSize: 2,\n  autoCloseBrackets: true,\n  matchBrackets: true,\n  showCursorWhenSelecting: true,\n  // 显示行号\n  lineNumbers: true,\n  fullScreen: true\n};\nfunction ReactCodeMirror(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    options = {},\n    value = '',\n    width = '100%',\n    height = '100%',\n    lazyLoadMode = true\n  } = props;\n  var [editor, setEditor] = useState();\n  var textareaRef = useRef();\n  var lastestProps = useRef(props);\n  useImperativeHandle(ref, () => ({\n    editor,\n    textarea: textareaRef.current\n  }), [editor, textareaRef]);\n  lastestProps.current = props;\n\n  // 将props中所有的事件处理函数映射并保存\n  function getEventHandleFromProps() {\n    var propNames = Object.keys(props);\n    var eventHandle = propNames.filter(keyName => {\n      return /^on+/.test(keyName);\n    });\n    var eventDict = {};\n    eventHandle.forEach(ele => {\n      var name = ele.slice(2);\n      if (name && name[0]) {\n        eventDict[ele] = name.replace(name[0], name[0].toLowerCase());\n      }\n    });\n    return eventDict;\n  }\n\n  // http://codemirror.net/doc/manual.html#config\n  function setOptions(_x, _x2) {\n    return _setOptions.apply(this, arguments);\n  }\n  function _setOptions() {\n    _setOptions = _asyncToGenerator(function* (instance, opt) {\n      if (opt === void 0) {\n        opt = {};\n      }\n      if (typeof opt === 'object' && window) {\n        var mode = CodeMirror.findModeByName(opt.mode || '');\n        if (lazyLoadMode && mode && mode.mode) {\n          yield import(\"codemirror/mode/\" + mode.mode + \"/\" + mode.mode + \".js\");\n        }\n        if (mode) {\n          opt.mode = mode.mime;\n        }\n        Object.keys(opt).forEach(name => {\n          if ((opt[name] || opt[name] === false) && JSON.stringify(opt[name])) {\n            instance.setOption(name, opt[name]);\n          }\n        });\n      }\n    });\n    return _setOptions.apply(this, arguments);\n  }\n  useEffect(() => {\n    if (!editor && window) {\n      // 生成codemirror实例\n      var instance = CodeMirror.fromTextArea(textareaRef.current, _extends({}, defaultOptions, options));\n      var eventDict = getEventHandleFromProps();\n      Object.keys(eventDict).forEach(event => {\n        instance.on(eventDict[event], function () {\n          return lastestProps.current[event](...arguments);\n        });\n      });\n      instance.setValue(value || '');\n      if (width || height) {\n        // 设置尺寸\n        instance.setSize(width, height);\n      }\n      setEditor(instance);\n      setOptions(instance, _extends({}, defaultOptions, options));\n    }\n    return () => {\n      if (editor && window) {\n        editor.toTextArea();\n        setEditor(undefined);\n      }\n    };\n  }, []);\n  useMemo(() => {\n    if (!editor || !window) return;\n    var val = editor.getValue();\n    if (value !== undefined && value !== val) {\n      editor.setValue(value);\n    }\n  }, [value]);\n  useMemo(() => {\n    if (!editor || !window) return;\n    editor.setSize(width, height);\n  }, [width, height]);\n  useMemo(() => {\n    if (!editor || !window) return;\n    setOptions(editor, _extends({}, defaultOptions, options));\n  }, [editor, options]);\n  return /*#__PURE__*/_jsx(\"textarea\", {\n    ref: textareaRef,\n    children: value\n  });\n}\nexport default /*#__PURE__*/React.forwardRef(ReactCodeMirror);","map":{"version":3,"sources":["../src/index.js"],"names":["React","useRef","useEffect","useImperativeHandle","useState","useMemo","CodeMirror","defaultOptions","tabSize","autoCloseBrackets","matchBrackets","showCursorWhenSelecting","lineNumbers","fullScreen","ReactCodeMirror","props","ref","options","value","width","height","lazyLoadMode","editor","setEditor","textareaRef","lastestProps","textarea","current","getEventHandleFromProps","propNames","Object","keys","eventHandle","filter","keyName","test","eventDict","forEach","ele","name","slice","replace","toLowerCase","setOptions","instance","opt","window","mode","findModeByName","mime","JSON","stringify","setOption","fromTextArea","event","on","setValue","setSize","toTextArea","undefined","val","getValue","_jsx","children","forwardRef"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useImperativeHandle, useState, useMemo } from 'react';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/meta';\nimport './codemirror.css';\n\nconst defaultOptions = {\n  tabSize: 2,\n  autoCloseBrackets: true,\n  matchBrackets: true,\n  showCursorWhenSelecting: true,\n  // 显示行号\n  lineNumbers: true,\n  fullScreen: true,\n}\n\nfunction ReactCodeMirror(props = {}, ref) {\n  const { options = {}, value = '', width = '100%', height = '100%', lazyLoadMode = true } = props;\n  const [editor, setEditor] = useState();\n  const textareaRef = useRef();\n  const lastestProps = useRef(props);\n\n  useImperativeHandle(ref, () => ({ editor, textarea: textareaRef.current }), [editor, textareaRef]);\n  lastestProps.current = props;\n  \n  // 将props中所有的事件处理函数映射并保存\n  function getEventHandleFromProps() {\n    const propNames = Object.keys(props);\n    const eventHandle = propNames.filter((keyName) => {\n      return /^on+/.test(keyName);\n    });\n\n    const eventDict = {};\n    eventHandle.forEach((ele) => {\n      const name = ele.slice(2);\n      if (name && name[0]) {\n        eventDict[ele] = name.replace(name[0], name[0].toLowerCase());\n      }\n    });\n\n    return eventDict;\n  }\n\n  // http://codemirror.net/doc/manual.html#config\n  async function setOptions(instance, opt = {}) {\n    if (typeof opt === 'object' && window) {\n      const mode = CodeMirror.findModeByName(opt.mode || '');\n      if (lazyLoadMode && mode && mode.mode) {\n        await import(`codemirror/mode/${mode.mode}/${mode.mode}.js`);\n      }\n      if (mode) {\n        opt.mode = mode.mime;\n      }\n      Object.keys(opt).forEach((name) => {\n        if ((opt[name] || opt[name] === false) && JSON.stringify(opt[name])) {\n          instance.setOption(name, opt[name]);\n        }\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (!editor && window) {\n      // 生成codemirror实例\n      const instance = CodeMirror.fromTextArea(textareaRef.current, {...defaultOptions, ...options});\n      const eventDict = getEventHandleFromProps();\n      Object.keys(eventDict).forEach((event) => {\n        instance.on(eventDict[event], (...params) => lastestProps.current[event](...params));\n      });\n      instance.setValue(value || '');\n\n      if (width || height) {\n        // 设置尺寸\n        instance.setSize(width, height);\n      }\n      setEditor(instance);\n      setOptions(instance, {...defaultOptions, ...options});\n    }\n    return () => {\n      if (editor && window) {\n        editor.toTextArea();\n        setEditor(undefined);\n      }\n    }\n  }, []);\n\n  useMemo(() => {\n    if (!editor || !window) return;\n    const val = editor.getValue();\n    if (value !== undefined && value !== val) {\n      editor.setValue(value);\n    }\n  }, [value]);\n\n  useMemo(() => {\n    if (!editor || !window) return;\n    editor.setSize(width, height);\n  }, [width, height]);\n\n\n  useMemo(() => {\n    if (!editor || !window) return;\n    setOptions(editor, {...defaultOptions, ...options});\n  }, [editor, options]);\n  \n  return (\n    <textarea ref={textareaRef}>{value}</textarea>\n  );\n}\n\nexport default React.forwardRef(ReactCodeMirror);\n"]},"metadata":{},"sourceType":"module"}
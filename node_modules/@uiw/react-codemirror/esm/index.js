import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React, { useRef, useEffect, useImperativeHandle, useState, useMemo } from 'react';
import CodeMirror from 'codemirror';
import 'codemirror/mode/meta';
import './codemirror.css';
import { jsx as _jsx } from "react/jsx-runtime";
var defaultOptions = {
  tabSize: 2,
  autoCloseBrackets: true,
  matchBrackets: true,
  showCursorWhenSelecting: true,
  // 显示行号
  lineNumbers: true,
  fullScreen: true
};
function ReactCodeMirror(props, ref) {
  if (props === void 0) {
    props = {};
  }
  var {
    options = {},
    value = '',
    width = '100%',
    height = '100%',
    lazyLoadMode = true
  } = props;
  var [editor, setEditor] = useState();
  var textareaRef = useRef();
  var lastestProps = useRef(props);
  useImperativeHandle(ref, () => ({
    editor,
    textarea: textareaRef.current
  }), [editor, textareaRef]);
  lastestProps.current = props;

  // 将props中所有的事件处理函数映射并保存
  function getEventHandleFromProps() {
    var propNames = Object.keys(props);
    var eventHandle = propNames.filter(keyName => {
      return /^on+/.test(keyName);
    });
    var eventDict = {};
    eventHandle.forEach(ele => {
      var name = ele.slice(2);
      if (name && name[0]) {
        eventDict[ele] = name.replace(name[0], name[0].toLowerCase());
      }
    });
    return eventDict;
  }

  // http://codemirror.net/doc/manual.html#config
  function setOptions(_x, _x2) {
    return _setOptions.apply(this, arguments);
  }
  function _setOptions() {
    _setOptions = _asyncToGenerator(function* (instance, opt) {
      if (opt === void 0) {
        opt = {};
      }
      if (typeof opt === 'object' && window) {
        var mode = CodeMirror.findModeByName(opt.mode || '');
        if (lazyLoadMode && mode && mode.mode) {
          yield import("codemirror/mode/" + mode.mode + "/" + mode.mode + ".js");
        }
        if (mode) {
          opt.mode = mode.mime;
        }
        Object.keys(opt).forEach(name => {
          if ((opt[name] || opt[name] === false) && JSON.stringify(opt[name])) {
            instance.setOption(name, opt[name]);
          }
        });
      }
    });
    return _setOptions.apply(this, arguments);
  }
  useEffect(() => {
    if (!editor && window) {
      // 生成codemirror实例
      var instance = CodeMirror.fromTextArea(textareaRef.current, _extends({}, defaultOptions, options));
      var eventDict = getEventHandleFromProps();
      Object.keys(eventDict).forEach(event => {
        instance.on(eventDict[event], function () {
          return lastestProps.current[event](...arguments);
        });
      });
      instance.setValue(value || '');
      if (width || height) {
        // 设置尺寸
        instance.setSize(width, height);
      }
      setEditor(instance);
      setOptions(instance, _extends({}, defaultOptions, options));
    }
    return () => {
      if (editor && window) {
        editor.toTextArea();
        setEditor(undefined);
      }
    };
  }, []);
  useMemo(() => {
    if (!editor || !window) return;
    var val = editor.getValue();
    if (value !== undefined && value !== val) {
      editor.setValue(value);
    }
  }, [value]);
  useMemo(() => {
    if (!editor || !window) return;
    editor.setSize(width, height);
  }, [width, height]);
  useMemo(() => {
    if (!editor || !window) return;
    setOptions(editor, _extends({}, defaultOptions, options));
  }, [editor, options]);
  return /*#__PURE__*/_jsx("textarea", {
    ref: textareaRef,
    children: value
  });
}
export default /*#__PURE__*/React.forwardRef(ReactCodeMirror);
//# sourceMappingURL=index.js.map